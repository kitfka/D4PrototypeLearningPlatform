@page
@model D4PrototypeLearningPlatform.Pages.Opgaven.Example.Vraag3Model
@{
}

<div id="editor"></div>

<button type="button" class="btn btn-primary" onclick="document.querySelector('#hidden-success-alert').classList.remove('d-none')">Check code</button>

<div class="alert alert-success d-none" role="alert" id="hidden-success-alert">
    The code is correct!!!! 😊
    <button type="button" class="btn btn-primary" onclick="document.querySelector('#hidden-success-alert').classList.remove('d-none')">Check code</button>
</div>

<script>
var el = document.getElementById('editor');

// window.editor is accessible. 
var editor = null;
var init = function () {

    if (el) {
        console.log("Loading editor...");
        el.style.height = '800px';
        require(['vs/editor/editor.main'], function () {

            editor = monaco.editor.create(el, {
                theme: 'vs-dark',
                model: monaco.editor.createModel(`using D4PrototypeLearningPlatform.Data;
using D4PrototypeLearningPlatform.Model;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(connectionString));
builder.Services.AddDatabaseDeveloperPageExceptionFilter();

builder.Services.AddDefaultIdentity<ApplicationUser>(options => options.SignIn.RequireConfirmedAccount = false)
    .AddEntityFrameworkStores<ApplicationDbContext>();
builder.Services.AddRazorPages(options =>
{
    options.Conventions.AllowAnonymousToPage("/Private/PublicPage");
    options.Conventions.AllowAnonymousToFolder("/Private/PublicPages");
});

builder.Services.Configure<IdentityOptions>(options =>
{
    // Uncomment this when we want to enable some real security!
    //// Password settings.
    //options.Password.RequireDigit = true;
    //options.Password.RequireLowercase = true;
    //options.Password.RequireNonAlphanumeric = true;
    //options.Password.RequireUppercase = true;
    //options.Password.RequiredLength = 6;
    //options.Password.RequiredUniqueChars = 1;

    //// Lockout settings.
    //options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);
    //options.Lockout.MaxFailedAccessAttempts = 5;
    //options.Lockout.AllowedForNewUsers = true;

    //// User settings.
    //options.User.AllowedUserNameCharacters =
    //"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-.";
    options.User.RequireUniqueEmail = true;
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseMigrationsEndPoint();
}
else
{
    app.UseExceptionHandler("/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

app.MapRazorPages();

app.Run();

`, "csharp")
            });

            editor.layout();
        });
    }

    // no point in keeping this around.
    window.removeEventListener("load", init);
};

window.addEventListener("load", init);
</script>